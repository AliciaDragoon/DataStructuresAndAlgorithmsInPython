# 在n维空间定义一个向量v=(v₁, v₂,..., vₙ)的p范数，如下所示：
# ‖v‖ = (v₁^p+ v₂^p+...+vₙ^p)^(1/p)
# 对于p=2的特殊情况，这就形成了传统的欧几里得范数，表示向量的长度。例如一个二维向量坐标为(4, 3)的欧几里得范数为(4²+3²)^(1/2)=5。编写norm函数，
# 即norm(v, p)，返回向量v的欧几里得范数。你可以假定v是一个数字列表。
def norm(v, p=2):
    """计算向量的p范数

    参数:
        v (list): 数字列表表示的向量
        p (int/float): 范数的阶数，默认为2(欧几里得范数)

    返回:
        float: 向量的p范数值
    """
    return sum(x ** p for x in v) ** (1 / p)


# 计算二维向量(4,3)的欧几里得范数(默认p=2)
print(norm([4, 3]))  # 输出: 5.0

# 计算三维向量(1,2,3)的1范数(曼哈顿距离)
print(norm([1, 2, 3], 1))  # 输出: 6.0
